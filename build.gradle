plugins {
    id 'java'
    id 'eclipse'
    id 'application'
    id 'org.openjfx.javafxplugin'      version '0.0.10'
    id 'org.beryx.jlink'               version '2.24.0'
    id 'com.github.ben-manes.versions' version '0.39.0'
}

application {
    mainModule = 'fxgame'
    mainClass = 'io.fxgame.game2048.AppLauncher'
}

dependencies {
    implementation 'com.github.almasb:fxgl:11.16'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of('16')
    }
}

javafx {
    version = '16'
    modules = [
       'javafx.base',
       'javafx.graphics',
       'javafx.controls',
       'javafx.media',
       'javafx.fxml'
    ]
}

// set jpackage installerType based on OS
def os = org.gradle.internal.os.OperatingSystem.current()
def jPkgInstallerType = ''
if (os.isLinux()) {
    jPkgInstallerType = 'deb'
} else if (os.isMacOsX()) {
    jPkgInstallerType = 'pkg'
} else if (os.isWindows()) {
    jPkgInstallerType = 'msi'
}

print(jPkgInstallerType)

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    imageZip = project.file("${buildDir}/distributions/game2048-${javafx.platform.classifier}.zip")
    // mergedModuleName = 'fx2048game'

    launcher {
        name = 'fxgame'
    }

    jpackage {
        imageName = 'fx2048'
        imageOptions = ['--mac-package-identifier','io.fxgame.fx2048']

        installerName = 'fx2048'
        installerType = "${jPkgInstallerType}"
        skipInstaller = false

        outputDir = "installers"
    }
}

task dist {
    dependsOn clean, jlinkZip
    description "Calls clean and then jlinkZip [default]"
}

defaultTasks 'dist'

eclipse {
    classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
                    it.entryAttributes['module'] = 'true'
                }

            }
        }
    }
}
