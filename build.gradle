plugins {
    id 'java'
    id 'eclipse'
    id 'application'
    id 'org.openjfx.javafxplugin'      version '0.0.10'
    id 'org.beryx.jlink'               version '2.24.0'
    id 'com.github.ben-manes.versions' version '0.39.0'
}

application {
    mainModule = 'fx2048'
    mainClass = 'io.fxgame.game2048.AppLauncher'
}

dependencies {
    implementation 'com.github.almasb:fxgl:11.16'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of('17')
    }
}

javafx {
    version = '16'
    modules = [
       'javafx.base',
       'javafx.graphics',
       'javafx.controls',
       'javafx.media',
       'javafx.fxml'
    ]
}

// set jpackage installerType based on OS
def os = org.gradle.internal.os.OperatingSystem.current()
def pkgType = os.windows ? 'msi' : os.linux ? 'deb' : 'pkg'

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    imageZip = project.file("${buildDir}/distributions/game2048-${javafx.platform.classifier}.zip")

    launcher {
        name = 'fx2048'
        noConsole = true
    }

    addExtraDependencies("javafx")

    jpackage {
        imageName = 'fx2048'
        imageOptions = ['--mac-package-identifier','fx2048']

        installerName = 'fx2048'
        installerType = "${pkgType}"
        installerOptions = ['--resource-dir', "src/main/resources", "--mac-package-name", "fx2048"]
        installerOptions += [
                '--vendor', 'Bruno Borges',
                '--app-version', version
        ]
        if (os.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu']
        }
        skipInstaller = false
    }
}

task dist {
    dependsOn clean, jlinkZip
    description "Calls clean and then jlinkZip [default]"
}

defaultTasks 'dist'

eclipse {
    classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
                    it.entryAttributes['module'] = 'true'
                }

            }
        }
    }
}
